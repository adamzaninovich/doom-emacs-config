#+title:  My Doom Emacs Config
#+author: Adam Zaninovich
#+PROPERTY: header-args:emacs-lisp :tangle ./config.el

Write the header and warning to edit this file instead of config.el directly.
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;;; NOTE: `config.el' is now generated from `config.org'. Please edit that file
;;;       in Emacs and `config.el' will be generated automatically!
#+end_src

* Table of Contents :TOC_3:noexport:
- [[#imports][Imports]]
- [[#functions][Functions]]
- [[#initial-setup][Initial Setup]]
- [[#basic-functionality][Basic Functionality]]
- [[#basic-ui-configuration][Basic UI Configuration]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
- [[#org-mode][Org Mode]]
  - [[#better-font-faces][Better font faces]]
  - [[#basic-config][Basic Config]]
  - [[#auto-tangle-configuration-files][Auto-tangle Configuration Files]]
- [[#plugin-config][Plugin Config]]
  - [[#flycheck][Flycheck]]
  - [[#treemacs][Treemacs]]
  - [[#tabs][Tabs]]
  - [[#lsp][LSP]]
  - [[#projectile][Projectile]]
  - [[#evil-snipe][Evil-Snipe]]
  - [[#elixir][Elixir]]
- [[#key-bindings][Key Bindings]]
- [[#additional-information][Additional Information]]

* Imports

You will need to fill out a =secret.el= file for this config to work.

If you'd like an example =secret.el= file to fill out, put your cursor on this code block and press =C-c C-c= to run it.
#+begin_src shell :results output verbatim
if [ ! -f secret.el ]; then
    cp secret.example.el secret.el
    echo "copied to secret.el, now go fill out the file"
else
    echo "secret.el already exists, make sure it has the correct information"
fi
#+end_src

#+begin_src emacs-lisp

(load! "secret.el")

#+end_src

* Functions

Helpful stuff

#+begin_src emacs-lisp

(defun adam/choose-random-banner (files)
  (adam/make-banner-path (adam/random-choice files)))

(defun adam/make-banner-path (file)
  (substitute-in-file-name
   (concat "$HOME/.config/doom/banners/" file)))

(defun adam/random-choice (items)
  (let* ((size (length items))
         (index (random size)))
    (nth index items)))

#+end_src

* Initial Setup

Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.

#+begin_src emacs-lisp

(setq user-full-name "Adam Zaninovich"
      user-mail-address my-gpg-email-address)

#+end_src

Sets a random banner on startup - banners are stored in ~banners/~

#+begin_src emacs-lisp

(setq adam/banner-list '("doom-blue.png"
                       "doom-2-blue.png"
                       "doom-guy.png"
                       "doom-grey.png"
                       "doom-2-grey.png"
                       "doom-doc.png"
                       "doom-orange.png"
                       "doom-2-orange.png"
                       "doom-perfection.png"
                       "doom-purple.png"
                       "doom-2-purple.png"
                       "vim.png"))

(setq +doom-dashboard-banner-file (adam/choose-random-banner adam/banner-list))

#+end_src

* Basic Functionality

Don't move cursor back when exiting insert mode

#+begin_src emacs-lisp

(setq evil-move-cursor-back nil)

#+end_src

Turn on Auto Revert Mode globally. This will automatically refresh the buffer when the file changes on disk (either through externaledits or something like a git branch change). The buffer will NOT revert if you have unsaved changes.

#+begin_src emacs-lisp

(global-auto-revert-mode t)

#+end_src

* Basic UI Configuration

Setup some basic UI defaults

- Start maximized
- No minimal window chrome
- Relative line numbers
- No Numbers in Org more and terminals

#+begin_src emacs-lisp

(add-to-list 'initial-frame-alist '(fullscreen . maximized))

(after! doom-ui
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (set-fringe-mode 15))

(setq display-line-numbers-type 'relative)

(dolist (mode '(org-mode-hook
                vterm-mode-hook
                shell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Fonts

Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:

- ~doom-font~
- ~doom-variable-pitch-font~
- ~doom-big-font~ -- used for ~doom-big-font-mode~; use this for presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string.

#+begin_src emacs-lisp

(setq adam/font-family "FiraCode Nerd Font"
      adam/variable-pitch-font-family "Myriad Pro")

(setq
 doom-font (font-spec :family adam/font-family :size 14 :style "Retina")
 doom-big-font (font-spec :family adam/font-family :size 20 :style "Retina")
 doom-variable-pitch-font (font-spec :family adam/variable-pitch-font-family :size 16 :style "Regular"))

#+end_src

** Theme

There are two ways to load a theme. Both assume the theme is installed and available. You can either set ~doom-theme~ or manually load a theme with the ~load-theme~ function.

Some good themes:
- doom-one (default)
- doom-nord
- doom-palenight

#+begin_src emacs-lisp

(setq doom-theme 'doom-palenight)

#+end_src

* Org Mode

** Better font faces

- Replace list hyphen with dot
- Set faces for heading levels
- Ensure that anything that should be fixed-pitch in Org files appears that way

#+begin_src emacs-lisp

(defun adam/org-font-setup ()
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))

  (dolist (face '((org-level-1 . 1.4)
                  (org-level-2 . 1.3)
                  (org-level-3 . 1.2)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font adam/variable-pitch-font-family :weight 'Semibold :height (cdr face)))

  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil                 :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil               :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil                  :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil                 :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil              :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil       :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil             :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil              :inherit 'fixed-pitch)
  (set-face-attribute 'line-number nil               :inherit 'fixed-pitch)
  (set-face-attribute 'line-number-current-line nil  :inherit 'fixed-pitch))

#+end_src

** Basic Config

#+begin_src emacs-lisp

(require 'org-tempo)

(after! org
  (setq
   org-directory "~/projects/org/"
   org-agenda-files '("~/projects/org/agenda.org" "~/projects/org/todo.org")
   org-log-done 'time)

  (add-to-list 'org-structure-template-alist '("el"  . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh"  . "src shell"))
  (add-to-list 'org-structure-template-alist '("iex" . "src elixir"))

  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1)
  (adam/org-font-setup))

#+end_src

** Auto-tangle Configuration Files

#+begin_src emacs-lisp

(defun adam/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.config/doom/config.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'adam/org-babel-tangle-config)))

#+end_src

* Plugin Config

** Flycheck
#+begin_src emacs-lisp

(setq-default flycheck-disabled-checkers '(proselint))

#+end_src

** Treemacs

Set Treemacs visual config and theme

#+begin_src emacs-lisp

(setq
 treemacs-width 30
 treemacs-follow-mode t
 treemacs-position 'left
 doom-themes-treemacs-theme "doom-colors")

#+end_src

** Tabs

Set Centaur tabs visuals and font

#+begin_src emacs-lisp

(after! centaur-tabs
  (setq
   centaur-tabs-style "bar"
   centaur-tabs-set-bar 'none
   centaur-tabs-height 28)
  (centaur-tabs-change-fonts adam/variable-pitch-font-family 150))

#+end_src

** LSP

Do not watch files because it's annoying when it asks every time
TODO: Figure out how to ignore certain files so that it can watch a reasonable amount of files without asking or slowing things down.

#+begin_src emacs-lisp

(setq lsp-enable-file-watchers nil)

#+end_src

** Projectile

Set Projectile project search path. Refresh projects with ~M-x projectile-discover-projects-in-search-path~.

#+begin_src emacs-lisp

(after! projectile
  (setq projectile-project-search-path '("~/projects/")))

#+end_src

** Evil-Snipe

Disable evil-snipe mode so that =S= and =s= work as they do in vim

#+begin_src emacs-lisp

(after! evil-snipe (evil-snipe-mode -1))

#+end_src

** Elixir

Create a buffer-local hook to run elixir-format on save, only when we enable elixir-mode.

#+begin_src emacs-lisp

(add-hook 'elixir-mode-hook
          (lambda () (add-hook 'before-save-hook 'elixir-format nil t)))
(add-hook 'elixir-format-hook (lambda ()
                                (if (projectile-project-p)
                                    (setq elixir-format-arguments
                                          (list "--dot-formatter"
                                                (concat (locate-dominating-file buffer-file-name ".formatter.exs") ".formatter.exs")))
                                  (setq elixir-format-arguments nil))))

#+end_src

* Key Bindings

- Todo
  + [ ] map =,,= to =C-6=

#+begin_src emacs-lisp

(map! :desc "Open Dired here" :n "-" #'dired-jump)

(map! :desc "Next Tab" :g "s-}" #'centaur-tabs-forward)
(map! :desc "Previous Tab" :g "s-{" #'centaur-tabs-backward)

(map! :desc "Decrease current window width" :g "s-[" #'evil-window-decrease-width)
(map! :desc "Increase current window width" :g "s-]" #'evil-window-increase-width)

#+end_src

* Additional Information

Here are some additional functions/macros that could help you configure Doom:

- ~load!~ for loading external *.el files relative to this one
- ~use-package!~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the ~load-path~, relative to
  this file. Emacs searches the ~load-path~ when you load packages with
  ~require~ or ~use-package~.
- ~map!~ for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press =k= (non-evil users must press =C-c c k=).
This will open documentation for it, including demos of how they are used.

You can also try =gd= (or =C-c c d=) to jump to their definition and see how
they are implemented.
